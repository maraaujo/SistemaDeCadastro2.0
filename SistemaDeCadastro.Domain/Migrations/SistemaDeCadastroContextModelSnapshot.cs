// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaDeCadastro.Domain.Context;

#nullable disable

namespace SistemaDeCadastro.Domain.Migrations
{
    [DbContext(typeof(SistemaDeCadastroContext))]
    partial class SistemaDeCadastroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Doenca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("doenca", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Familia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Endereco")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Endereco");

                    b.Property<int>("IdosoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Nome");

                    b.Property<string>("Numero")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Numero");

                    b.Property<string>("Sobrenome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Sobrenome");

                    b.HasKey("Id");

                    b.HasIndex("IdosoId");

                    b.ToTable("familia", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")

                        .HasColumnType("int")
                        .HasColumnName("Departamento_ID")

                        .HasColumnType("int")

                        .HasColumnType("int");


                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Documento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("senha");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Sobrenome");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("funcionario", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Idoso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CodigoBarras");
                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataDeNascimento")

                        .HasColumnType("timestamp")

                        .HasColumnType("timestamp(0) without time zone")

                        .HasColumnType("timestamp(0) without time zone")

                        .HasColumnName("DataDeNascimento");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Nome");

                    b.Property<string>("RestricoesAlimentares")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RestricoesAlimentares");

                    b.Property<string>("Sobrenome")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Sobrenome");

                    b.Property<string>("TipoSanguineo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("TipoSanguineo");


                    b.HasKey("Id");

                    b.ToTable("idoso", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.IdosoDoenca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoencaId")
                        .HasColumnType("int");

                    b.Property<int>("IdosoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoencaId");

                    b.HasIndex("IdosoId");

                    b.ToTable("idoso_doenca", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.IdosoFuncionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuncionarioID")
                        .HasColumnType("int");

                    b.Property<int>("IdosoID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioID");

                    b.HasIndex("IdosoID");

                    b.ToTable("Idoso_Funcionario", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Laboratorio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Laboratorio");


                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Nome");


                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UnidadeMedida");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.ToTable("medicamento", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.MedicamentoIdosoDoenca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoencaId")
                        .HasColumnType("int");

                    b.Property<int>("IdosoId")
                        .HasColumnType("int");

                    b.Property<string>("MedicamentoDosagem")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Medicamento_Dosagem");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoencaId");

                    b.HasIndex("IdosoId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("medicamento_idoso_doenca", (string)null);
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Ministracao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp")
                        .HasColumnName("Data");

                    b.Property<int>("IdosoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Posologia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Posologia");

                    b.HasKey("Id");

                    b.HasIndex("IdosoId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("ministracao", (string)null);
                });


            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeCadastro.Domain.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Familia", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Idoso", "Idoso")
                        .WithMany("Familias")
                        .HasForeignKey("IdosoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idoso");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Funcionario", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Departamento", "Departamento")
                        .WithMany("Funcionarios")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.IdosoDoenca", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Doenca", "Doencas")
                        .WithMany("IdosoDoencas")
                        .HasForeignKey("DoencaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeCadastro.Domain.Model.Idoso", "Idosos")
                        .WithMany("IdosoDoencas")
                        .HasForeignKey("IdosoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doencas");

                    b.Navigation("Idosos");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.IdosoFuncionario", b =>
                {

                    b.HasOne("SistemaDeCadastro.Domain.Model.Funcionario", "Funcionario")

                  

                        .WithMany("Idosos")
                        .HasForeignKey("FuncionarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();


                    b.HasOne("SistemaDeCadastro.Domain.Model.Idoso", "Idoso")

                  

                        .WithMany("Funcionarios")
                        .HasForeignKey("IdosoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();


                    b.Navigation("Funcionario");

                    b.Navigation("Idoso");

                    b.Navigation("Funcionarios");

                    b.Navigation("Idosos");

                    b.Navigation("Funcionarios");

                    b.Navigation("Idosos");

                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.MedicamentoIdosoDoenca", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Doenca", "Doencas")
                        .WithMany("MedicamentoIdosoDoencas")
                        .HasForeignKey("DoencaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeCadastro.Domain.Model.Idoso", "Idoso")
                        .WithMany("MedicamentoIdosoDoencas")
                        .HasForeignKey("IdosoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeCadastro.Domain.Model.Medicamento", "Medicamentos")
                        .WithMany("MedicamentoIdosoDoencas")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doencas");

                    b.Navigation("Idoso");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Ministracao", b =>
                {
                    b.HasOne("SistemaDeCadastro.Domain.Model.Idoso", "Idoso")
                        .WithMany("Ministracoes")
                        .HasForeignKey("IdosoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeCadastro.Domain.Model.Medicamento", "Medicamento")
                        .WithMany("Ministracoes")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idoso");

                    b.Navigation("Medicamento");
                });


            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Departamento", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Doenca", b =>
                {
                    b.Navigation("IdosoDoencas");

                    b.Navigation("MedicamentoIdosoDoencas");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Funcionario", b =>
                {
                    b.Navigation("Idosos");
                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Idoso", b =>
                {
                    b.Navigation("Familias");

                    b.Navigation("Funcionarios");

                    b.Navigation("IdosoDoencas");

                    b.Navigation("MedicamentoIdosoDoencas");

                    b.Navigation("Ministracoes");

                });

            modelBuilder.Entity("SistemaDeCadastro.Domain.Model.Medicamento", b =>
                {
                    b.Navigation("MedicamentoIdosoDoencas");


                    b.Navigation("Ministracoes");

                });
#pragma warning restore 612, 618
        }
    }
}
